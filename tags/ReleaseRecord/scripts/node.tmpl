#import csharp as cs
#def initializer()
	#for field in $item.fields
		#if cs.isCollection($model.resolve($field.type))
			$cs.toPrivateName($field.name) = new ${field.type}(this);
		#end if
		#if "auto" in $field.attributes
			$field.name = new ${field.type}();
		#end if
	#end for
#end def
#def formatParameters(fields): #echo ", ".join([$cs.toLocalName(f.name) for f in fields])
#def constructorParameters(fields)
	#for field in $fields
$field.type $cs.toLocalName(field.name)#slurp
	#if $field != $fields[-1]
, #slurp
	#end if
	#end for
#end def
#def abstract(item)
	#if "abstract" in $item.attributes
abstract #slurp
	#end if
#end def
#def getTargetFileName(): src/Boo/Lang/Ast/${item.name}.cs
using System;
using Boo.Lang.Ast.Impl;

namespace Boo.Lang.Ast
{
#for derivedType in $cs.getDerivedTypes($item)
	[System.Xml.Serialization.XmlInclude(typeof($derivedType))]
#end for
	[Serializable]
	public ${abstract($item)}class $item.name : ${item.name}Impl
	{		
		public ${item.name}()
		{
$initializer() #slurp
		}
		#set simpleFields=list(cs.getNonAutoFields($item.fields))
		#if $simpleFields
		
		public ${item.name}($constructorParameters($simpleFields)) : base($formatParameters($simpleFields))
		{
		}
		
		public ${item.name}(LexicalInfo lexicalInfo, $constructorParameters($simpleFields)) : base(lexicalInfo, $formatParameters($simpleFields))
		{
		}
		#end if
		
		public ${item.name}(LexicalInfo lexicalInfoProvider) : base(lexicalInfoProvider)
		{
		}
		#unless "abstract" in $item.attributes
		
		public override void Switch(IAstSwitcher switcher)
		{
			switcher.On${item.name}(this);
		}
		#end unless		
	}
}
