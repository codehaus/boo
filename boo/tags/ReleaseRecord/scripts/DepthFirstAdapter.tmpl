#import csharp as cs
#def getTargetFileName(): src/Boo/Lang/Ast/DepthFirstSwitcher.cs
#raw
#region license
// boo - an extensible programming language for the CLI
// Copyright (C) 2004 Rodrigo B. de Oliveira
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// As a special exception, if you link this library with other files to
// produce an executable, this library does not by itself cause the
// resulting executable to be covered by the GNU General Public License.
// This exception does not however invalidate any other reasons why the
// executable file might be covered by the GNU General Public License.
//
// Contact Information
//
// mailto:rbo@acm.org
#endregion

#end raw
//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by the
// ast.py script on ${time.asctime()}
//
using System;

namespace Boo.Lang.Ast
{
	public class DepthFirstSwitcher : IAstSwitcher
	{
		public bool Switch(Node node)
		{			
			if (null != node)
			{
				try
				{
					node.Switch(this);
					return true;
				}
				catch (Boo.Lang.Compiler.CompilerError)
				{
					throw;
				}
				catch (Exception error)
				{
					throw Boo.Lang.Compiler.CompilerErrorFactory.InternalError(node, error);
				}
			}
			return false;
		}
		
		public bool Switch(NodeCollection collection)
		{
			if (null != collection)
			{
				foreach (Node node in collection.ToArray())
				{
					Switch(node);
				}
				return true;
			}
			return false;
		}
		
		#for item in $model
			#unless $item.stereotype in ("collection", "enum") or "abstract" in $item.attributes
				#set switchableFields = list(cs.getSwitchableFields(cs.getAllFields($item)))
		public virtual void On${item.name}(${item.name} node)
		{				
				#if switchableFields
			if (Enter${item.name}(node))
			{		
					#for field in switchableFields
				Switch(node.${field.name});
					#end for
				Leave${item.name}(node);
			}			
				#end if
		}
		
				#if switchableFields
		public virtual bool Enter${item.name}(${item.name} node)
		{
			return true;
		}
		
		public virtual void Leave${item.name}(${item.name} node)
		{
		}
		
				#end if
			#end unless
		#end for
	}
}
