#region license
// boo - an extensible programming language for the CLI
// Copyright (C) 2004 Rodrigo B. de Oliveira
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// As a special exception, if you link this library with other files to
// produce an executable, this library does not by itself cause the
// resulting executable to be covered by the GNU General Public License.
// This exception does not however invalidate any other reasons why the
// executable file might be covered by the GNU General Public License.
//
// Contact Information
//
// mailto:rbo@acm.org
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by the
// ast.py script on Sat Feb 07 14:42:16 2004
//
using System;

namespace Boo.Lang.Ast.Impl
{
	[Serializable]
	public abstract class ModuleImpl : TypeDefinition
	{
		protected NamespaceDeclaration _namespace;
		protected ImportCollection _imports;
		protected Block _globals;
		
		protected ModuleImpl()
		{
			_imports = new ImportCollection(this);
			Globals = new Block();
 		}
		
		protected ModuleImpl(NamespaceDeclaration namespace_)
		{
			_imports = new ImportCollection(this);
			Globals = new Block();
 			Namespace = namespace_;
		}
		
		protected ModuleImpl(LexicalInfo lexicalInfo, NamespaceDeclaration namespace_) : base(lexicalInfo)
		{
			_imports = new ImportCollection(this);
			Globals = new Block();
 			Namespace = namespace_;				
		}
		
		protected ModuleImpl(LexicalInfo lexicalInfo) : base(lexicalInfo)
		{
			_imports = new ImportCollection(this);
			Globals = new Block();
 		}
		
		public override NodeType NodeType
		{
			get
			{
				return NodeType.Module;
			}
		}
		public NamespaceDeclaration Namespace
		{
			get
			{
				return _namespace;
			}
			
			set
			{
				
				if (_namespace != value)
				{
					_namespace = value;
					if (null != _namespace)
					{
						_namespace.InitializeParent(this);
					}
				}
			}
		}
		public ImportCollection Imports
		{
			get
			{
				return _imports;
			}
			
			set
			{
				
				if (_imports != value)
				{
					_imports = value;
					if (null != _imports)
					{
						_imports.InitializeParent(this);
					}
				}
			}
		}
		public Block Globals
		{
			get
			{
				return _globals;
			}
			
			set
			{
				
				if (_globals != value)
				{
					_globals = value;
					if (null != _globals)
					{
						_globals.InitializeParent(this);
					}
				}
			}
		}
		public override bool Replace(Node existing, Node newNode)
		{
			if (base.Replace(existing, newNode))
			{
				return true;
			}
			
			if (_namespace == existing)
			{
				this.Namespace = (NamespaceDeclaration)newNode;
				return true;
			}
			if (_imports != null)
			{
				Import item = existing as Import;
				if (null != item)
				{
					if (_imports.Replace(item, (Import)newNode))
					{
						return true;
					}
				}
			}
			if (_globals == existing)
			{
				this.Globals = (Block)newNode;
				return true;
			}
			return false;
		}
		
		public override void Switch(IAstTransformer transformer, out Node resultingNode)
		{
			Module thisNode = (Module)this;
			Module resultingTypedNode = thisNode;
			transformer.OnModule(thisNode, ref resultingTypedNode);
			resultingNode = resultingTypedNode;
		}
	}
}
