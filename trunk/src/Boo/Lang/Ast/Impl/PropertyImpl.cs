#region license
// boo - an extensible programming language for the CLI
// Copyright (C) 2004 Rodrigo B. de Oliveira
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// As a special exception, if you link this library with other files to
// produce an executable, this library does not by itself cause the
// resulting executable to be covered by the GNU General Public License.
// This exception does not however invalidate any other reasons why the
// executable file might be covered by the GNU General Public License.
//
// Contact Information
//
// mailto:rbo@acm.org
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by
// astgenerator.boo on 2/29/2004 12:21:42 AM
//

namespace Boo.Lang.Ast.Impl
{
	using System;
	using Boo.Lang.Ast;
	
	[Serializable]
	public abstract class PropertyImpl : TypeMember
	{

		protected ParameterDeclarationCollection _parameters;
		protected Method _getter;
		protected Method _setter;
		protected TypeReference _type;

		protected PropertyImpl()
		{
			InitializeFields();
		}
		
		protected PropertyImpl(LexicalInfo info) : base(info)
		{
			InitializeFields();
		}
		

		protected PropertyImpl(Method getter, Method setter, TypeReference type)
		{
			InitializeFields();
			Getter = getter;
			Setter = setter;
			Type = type;
		}
			
		protected PropertyImpl(LexicalInfo lexicalInfo, Method getter, Method setter, TypeReference type) : base(lexicalInfo)
		{
			InitializeFields();
			Getter = getter;
			Setter = setter;
			Type = type;
		}
			
		new public Boo.Lang.Ast.Property CloneNode()
		{
			return Clone() as Boo.Lang.Ast.Property;
		}

		override public NodeType NodeType
		{
			get
			{
				return NodeType.Property;
			}
		}
		
		override public void Switch(IAstTransformer transformer, out Node resultingNode)
		{
			Boo.Lang.Ast.Property thisNode = (Boo.Lang.Ast.Property)this;
			Boo.Lang.Ast.Property resultingTypedNode = thisNode;
			transformer.OnProperty(thisNode, ref resultingTypedNode);
			resultingNode = resultingTypedNode;
		}

		override public bool Replace(Node existing, Node newNode)
		{
			if (base.Replace(existing, newNode))
			{
				return true;
			}

			if (_attributes != null)
			{
				Boo.Lang.Ast.Attribute item = existing as Boo.Lang.Ast.Attribute;
				if (null != item)
				{
					if (_attributes.Replace(item, (Boo.Lang.Ast.Attribute)newNode))
					{
						return true;
					}
				}
			}

			if (_parameters != null)
			{
				Boo.Lang.Ast.ParameterDeclaration item = existing as Boo.Lang.Ast.ParameterDeclaration;
				if (null != item)
				{
					if (_parameters.Replace(item, (Boo.Lang.Ast.ParameterDeclaration)newNode))
					{
						return true;
					}
				}
			}

			if (_getter == existing)
			{
				this.Getter = ((Boo.Lang.Ast.Method)newNode);
				return true;
			}

			if (_setter == existing)
			{
				this.Setter = ((Boo.Lang.Ast.Method)newNode);
				return true;
			}

			if (_type == existing)
			{
				this.Type = ((Boo.Lang.Ast.TypeReference)newNode);
				return true;
			}

			return false;
		}

		override public object Clone()
		{
			Boo.Lang.Ast.Property clone = (Boo.Lang.Ast.Property)System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof(Boo.Lang.Ast.Property));
			clone._lexicalInfo = _lexicalInfo;
			clone._documentation = _documentation;
			clone._properties = (System.Collections.Hashtable)_properties.Clone();
			

			clone._modifiers = _modifiers;

			clone._name = _name;

			if (null != _attributes)
			{
				clone._attributes = ((AttributeCollection)_attributes.Clone());
			}

			if (null != _parameters)
			{
				clone._parameters = ((ParameterDeclarationCollection)_parameters.Clone());
			}

			if (null != _getter)
			{
				clone._getter = ((Method)_getter.Clone());
			}

			if (null != _setter)
			{
				clone._setter = ((Method)_setter.Clone());
			}

			if (null != _type)
			{
				clone._type = ((TypeReference)_type.Clone());
			}
			
			return clone;
		}
			
		public ParameterDeclarationCollection Parameters
		{
			get
			{
				return _parameters;
			}
			

			set
			{
				if (_parameters != value)
				{
					_parameters = value;
					if (null != _parameters)
					{
						_parameters.InitializeParent(this);

					}
				}
			}
			

		}
		

		public Method Getter
		{
			get
			{
				return _getter;
			}
			

			set
			{
				if (_getter != value)
				{
					_getter = value;
					if (null != _getter)
					{
						_getter.InitializeParent(this);

					}
				}
			}
			

		}
		

		public Method Setter
		{
			get
			{
				return _setter;
			}
			

			set
			{
				if (_setter != value)
				{
					_setter = value;
					if (null != _setter)
					{
						_setter.InitializeParent(this);

					}
				}
			}
			

		}
		

		public TypeReference Type
		{
			get
			{
				return _type;
			}
			

			set
			{
				if (_type != value)
				{
					_type = value;
					if (null != _type)
					{
						_type.InitializeParent(this);

					}
				}
			}
			

		}
		

		private void InitializeFields()
		{
			_parameters = new ParameterDeclarationCollection(this);

		}
	}
}
