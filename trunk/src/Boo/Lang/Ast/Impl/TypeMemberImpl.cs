#region license
// boo - an extensible programming language for the CLI
// Copyright (C) 2004 Rodrigo B. de Oliveira
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// As a special exception, if you link this library with other files to
// produce an executable, this library does not by itself cause the
// resulting executable to be covered by the GNU General Public License.
// This exception does not however invalidate any other reasons why the
// executable file might be covered by the GNU General Public License.
//
// Contact Information
//
// mailto:rbo@acm.org
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by
// astgenerator.boo on 3/3/2004 11:15:05 AM
//

namespace Boo.Lang.Ast.Impl
{
	using System;
	using Boo.Lang.Ast;
	
	[Serializable]
	public abstract class TypeMemberImpl : Node, INodeWithAttributes
	{

		protected TypeMemberModifiers _modifiers;
		protected string _name;
		protected AttributeCollection _attributes;

		protected TypeMemberImpl()
		{
			InitializeFields();
		}
		
		protected TypeMemberImpl(LexicalInfo info) : base(info)
		{
			InitializeFields();
		}
		

		protected TypeMemberImpl(TypeMemberModifiers modifiers, string name)
		{
			InitializeFields();
			Modifiers = modifiers;
			Name = name;
		}
			
		protected TypeMemberImpl(LexicalInfo lexicalInfo, TypeMemberModifiers modifiers, string name) : base(lexicalInfo)
		{
			InitializeFields();
			Modifiers = modifiers;
			Name = name;
		}
			
		new public Boo.Lang.Ast.TypeMember CloneNode()
		{
			return Clone() as Boo.Lang.Ast.TypeMember;
		}

		public TypeMemberModifiers Modifiers
		{
			get
			{
				return _modifiers;
			}
			

			set
			{
				_modifiers = value;
			}

		}
		

		public string Name
		{
			get
			{
				return _name;
			}
			

			set
			{
				_name = value;
			}

		}
		

		public AttributeCollection Attributes
		{
			get
			{
				return _attributes;
			}
			

			set
			{
				if (_attributes != value)
				{
					_attributes = value;
					if (null != _attributes)
					{
						_attributes.InitializeParent(this);

					}
				}
			}
			

		}
		

		private void InitializeFields()
		{
			_attributes = new AttributeCollection(this);

		}
	}
}
