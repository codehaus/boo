import System
import System.IO
import Boo.Antlr from Boo.Antlr
import Boo.Lang.Ast

def WriteEnum(node as EnumDefinition):
	using writer=OpenFile(GetPathFromNode(node)):
		WriteLicense(writer)
		writer.Write("""
namespace Boo.Lang.Ast
{
	using System;

	[Serializable]
	public enum ${node.Name}
	{	
""")
		last = node.Members[-1]
		for field as EnumMember in node.Members:
			writer.Write("\t\t${field.Name}")
			if field.Initializer:
				writer.Write(" = ${field.Initializer.Value}")
			if field is not last:
				writer.Write(",")
			writer.WriteLine()

		writer.Write("""
	}
}
""")
	
def WriteCollection(node as ClassDefinition):
	path = GetPath("${node.Name}.cs")
	return if File.Exists(path)
	
	using writer=OpenFile(path):
		WriteLicense(writer)
		writer.Write("""
using System;

namespace Boo.Lang.Ast
{
	public class ${node.Name} : Boo.Lang.Ast.Impl.${node.Name}Impl
	{
		public ${node.Name}()
		{
		}
		
		public ${node.Name}(Boo.Lang.Ast.Node parent) : base(parent)
		{
		}
	}
}
""")

def GetCollectionItemType(node as ClassDefinition):
	attribute = node.Attributes.Get("collection")[0]
	reference as ReferenceExpression = attribute.Arguments[0]
	return reference.Name

def WriteCollectionImpl(node as ClassDefinition):
	path = GetPath("Impl/${node.Name}Impl.cs")
	using writer=OpenFile(path):
		WriteLicense(writer)
		
		itemType = "Boo.Lang.Ast." + GetCollectionItemType(node)
		writer.Write("""
//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by
// astgenerator.boo on ${date.Now}
//
namespace Boo.Lang.Ast.Impl
{
	using System;
	using Boo.Lang.Ast;
	
	[Serializable]
	public class ${node.Name}Impl : NodeCollection
	{
		protected ${node.Name}Impl()
		{
		}
		
		protected ${node.Name}Impl(Node parent) : base(parent)
		{
		}
		
		public ${itemType} this[int index]
		{
			get
			{
				return (${itemType})InnerList[index];
			}
		}

		public void Add(${itemType} item)
		{
			base.Add(item);			
		}
		
		public void Add(params ${itemType}[] items)
		{
			base.Add(items);			
		}
		
		public void Add(System.Collections.ICollection items)
		{
			foreach (${itemType} item in items)
			{
				base.Add(item);
			}
		}
		
		public void AddClones(System.Collections.ICollection items)
		{
			foreach (${itemType} item in items)
			{
				base.Add(item.CloneNode());
			}
		}
		
		public void Insert(int index, ${itemType} item)
		{
			base.Insert(index, item);
		}
		
		public bool Replace(${itemType} existing, ${itemType} newItem)
		{
			return base.Replace(existing, newItem);
		}
		
		public new ${itemType}[] ToArray()
		{
			return (${itemType}[])InnerList.ToArray(typeof(${itemType}));
		}
	}
}
""")

def OpenFile(fname as string):	
	print(fname)
	return StreamWriter(fname, false, System.Text.Encoding.UTF8)
	
def GetPath(fname as string):
	return Path.Combine("src/Boo/Lang/Ast", fname)
	
def GetPathFromNode(node as TypeMember):
	return GetPath("${node.Name}.cs")
	
def WriteClass(node as ClassDefinition):
	print("class ${node.Name}")
	
def IsCollection(node as ClassDefinition):
	return node.Attributes.Contains("collection")
	
def WriteLicense(writer as TextWriter):
	writer.Write(
"""#region license
// boo - an extensible programming language for the CLI
// Copyright (C) 2004 Rodrigo B. de Oliveira
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// As a special exception, if you link this library with other files to
// produce an executable, this library does not by itself cause the
// resulting executable to be covered by the GNU General Public License.
// This exception does not however invalidate any other reasons why the
// executable file might be covered by the GNU General Public License.
//
// Contact Information
//
// mailto:rbo@acm.org
#endregion
""")

start = date.Now

module = BooParser.ParseFile("ast.model.boo").Modules[0]
print("${module.Members.Count} types")

for member as TypeMember in module.Members:
	if NodeType.EnumDefinition == member.NodeType:
		WriteEnum(member)
	else:
		if IsCollection(member):
			WriteCollection(member)
			WriteCollectionImpl(member)
		else:
			WriteClass(member)
			
stop = date.Now
print("ast classes generated in ${stop-start}.")
