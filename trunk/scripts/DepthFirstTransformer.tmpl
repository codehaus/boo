#import csharp as cs
#def getTargetFileName(): src/Boo/Ast/DepthFirstTransformer.cs
#raw
#region license
// boo - an extensible programming language for the CLI
// Copyright (C) 2004 Rodrigo B. de Oliveira
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// As a special exception, if you link this library with other files to
// produce an executable, this library does not by itself cause the
// resulting executable to be covered by the GNU General Public License.
// This exception does not however invalidate any other reasons why the
// executable file might be covered by the GNU General Public License.
//
// Contact Information
//
// mailto:rbo@acm.org
#endregion

#end raw
//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by the
// ast.py script on ${time.asctime()}
//
using System;

namespace Boo.Ast
{
	public class DepthFirstTransformer : IAstTransformer
	{
		public bool Switch(Node node, out Node resultingNode)
		{			
			if (null != node)
			{			
				node.Switch(this, out resultingNode);
				return true;
			}
			resultingNode = node;
			return false;
		}
		
		public Node SwitchNode(Node node)
		{
			if (null != node)
			{
				Node resultingNode;
				node.Switch(this, out resultingNode);
				return resultingNode;
			}
			return null;
		}
		
		public Node Switch(Node node)
		{
			return SwitchNode(node);
		}
		
		public Expression Switch(Expression node)
		{
			return (Expression)SwitchNode(node);
		}
		
		public Statement Switch(Statement node)
		{
			return (Statement)SwitchNode(node);
		}
		
		public bool Switch(NodeCollection collection)
		{
			if (null != collection)
			{
				int removed = 0;
				
				Node[] nodes = collection.ToArray();
				for (int i=0; i<nodes.Length; ++i)
				{
					Node resultingNode;
					Node currentNode = nodes[i];
					currentNode.Switch(this, out resultingNode);
					if (currentNode != resultingNode)
					{
						int actualIndex = i-removed;
						if (null == resultingNode)
						{
							collection.RemoveAt(actualIndex);
						}
						else
						{
							collection.ReplaceAt(actualIndex, resultingNode);
						}
					}
				}
				return true;
			}
			return false;
		}
		
		#for item in $model
			#unless $item.stereotype in ("collection", "enum") or "abstract" in $item.attributes
				#set switchableFields = list(cs.getSwitchableFields(cs.getAllFields($item)))
				#set resultNodeType = $cs.getResultTransformerNode($item)
		public virtual void On${item.name}(${item.name} node, ref $resultNodeType resultingNode)
		{	
				#if switchableFields
			if (Enter${item.name}(node, ref resultingNode))
			{		
					#for field in switchableFields
						#if cs.isCollectionField($field)
				Switch(node.${field.name});
						#else
				${field.type} current${field.name}Value = node.${field.name};
				if (null != current${field.name}Value)
				{	
					Node resulting${field.name}Value;				
					current${field.name}Value.Switch(this, out resulting${field.name}Value);
					node.${field.name} = (${field.type})resulting${field.name}Value;
				}
						#end if
					#end for
				Leave${item.name}(node, ref resultingNode);
			}			
				#end if
		}
		
				#if switchableFields
		public virtual bool Enter${item.name}(${item.name} node, ref $resultNodeType resultingNode)
		{
			return true;
		}
		
		public virtual void Leave${item.name}(${item.name} node, ref $resultNodeType resultingNode)
		{
		}
		
				#end if
			#end unless
		#end for
	}
}
