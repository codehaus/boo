<?xml version="1.0"?>
<project name="boo" default="all">

	<property name="debug" value="true" />
	<property name="optimize" value="false" />
	
	<property name="skip.tests" value="false" />
	<property name="skip.satellites" value="false" />

	<property name="antlr.home" value="lib/antlr-2.7.3" />
	<property name="java" value="java" />
	
	<property name="antlr.jar" value="${antlr.home}/antlr.jar" />
	<property name="antlr.runtime.dll" value="${antlr.home}/lib/csharp/src/bin/antlr.runtime.dll" />
	<property name='nunit.framework.dll' value='${nant.location}/nunit.framework.dll' />
	<property name="NAnt.Core.dll" value="${nant.location}/NAnt.Core.dll" />
	
	<property name="ngen.exe" value="${nant.settings.currentframework.frameworkdirectory}/ngen.exe" />
	<property name="skip.ngen" value="False" />
	<property name="skip.antlr" value="False" />
	<property name="skip.ast" value="False" />
	
	<property name="build.dir" value="build" />

	<!-- build environment checking -->
	<if test="${not property::exists('nant.tasks.nunit2')}">
		<echo>nunit2 task is not available. Unit tests won't be executed.</echo>
		<property name="nant.tasks.nunit2" value="False" />
		<property name="skip.tests" value="True" />
	</if>	
	
	<target name="all" depends="booc, Boo.NAnt">	
	</target>
	
	<target name="Boo.NAnt" depends="booc">
		<copy file="${NAnt.Core.dll}" todir="build" />
		<exec program="build/booc.exe" useruntimeengine="true">
			<arg value="/out:build/Boo.NAnt.dll" />
			<arg value="/target:library" />
			<arg value="/r:${NAnt.Core.dll}" />
			<arg value="-v" />
			<arg value="src/Boo.NAnt/BooC.boo" />
		</exec>
	</target>
	
	<target name="booc" depends="core">
		<csc target="exe" output="build/booc.exe" debug="${debug}" optimize="${optimize}">
			<sources basedir="src/BooC">
				<includes name="*.cs" />
			</sources>

			<references>
				<includes name="build/Boo.dll" />
			</references>
		</csc>
		
		<exec program='${ngen.exe}' if="${file::exists(ngen.exe)}" unless="${skip.ngen}">
			<arg file='build/Boo.dll' />			
			<arg file='build/Boo.AntlrParser.dll' />
			<arg file='build/booc.exe' />
		</exec>
	</target>
	
	<target name="core" depends="Boo, Boo.AntlrParser, deploy">
	</target>
	
	<target name="deploy" depends="run-tests" unless="${skip.tests}">
		<mkdir dir="bin" />
		<copy todir="bin">
			<fileset basedir="build">
				<includes name="Boo.dll" />
				<includes name="Boo.NAnt.dll" />
				<includes name="Boo.AntlrParser.dll" />
				<includes name="antlr.runtime.dll" />
				<includes name="booc.exe" />
			</fileset>
		</copy>
	</target>
	
	<target name='run-tests' depends="Boo.Tests" unless='${skip.tests}'>

		<nunit2>       
			<formatter type="Plain" />
			<test assemblyname="build/Boo.Tests.dll" />
		</nunit2>
		
	</target>
	
	<target name="Boo.Tests" depends="Boo, Boo.AntlrParser">
		<csc
			target="library"
			output="build/Boo.Tests.dll"
			debug="true"
			optimize="false">

			<sources basedir="src/Boo.Tests">
				<includes name="**/*.cs" />
			</sources>

			<references>
				<includes name="${nunit.framework.dll}" />
				<includes name="build/Boo.dll" />
				<includes name="build/Boo.AntlrParser.dll" />
				<includes name="${antlr.runtime.dll}" />
			</references>
		</csc>
	</target>

	<target name="Boo" depends="compile-grammar, generate-ast, satellites">

		<resgen
			input="src/Boo/Resources/strings.txt"
			output="build/strings.resources" />

		<csc
			target="library"
			output="build/Boo.dll"
			debug="${debug}"
			optimize="${optimize}">

			<sources basedir="src/Boo">
				<includes name="**/*.cs" />
			</sources>
			
			<resources basedir="build">
				<includes name="strings.resources" />
			</resources>
			
			<resources basedir="src/Boo/Resources">
				<includes name="*.pipeline" />
			</resources>
		</csc>
	</target>
	
	<target name="Boo.AntlrParser" depends="Boo, compile-grammar">
		<csc target="library" output="build/Boo.AntlrParser.dll"
			debug="${debug}" optimize="${optimize}">
			<sources basedir="src/Boo.AntlrParser">
				<includes name="**/*.cs" />
			</sources>
			<references>
				<includes name="build/Boo.dll" />
				<includes name="build/antlr.runtime.dll" />
			</references>
		</csc>
	</target>
	
	<target name="satellites" depends="init" unless="${skip.satellites}">
		<mkdir dir="${build.dir}/pt" />

		<resgen
			input="src/Boo/Resources/pt/strings.txt"
			output="build/pt/strings.pt.resources" />

		<al target="lib" culture="pt" output="build/pt/Boo.resources.dll">
			<sources basedir="build/pt">
				<includes name="strings.pt.resources" />
			</sources>
		</al>
	</target>

	<target name="compile-grammar" depends="init" unless="${skip.antlr}">

		<if test="${not file::up-to-date('src/Boo.AntlrParser/boo.g', 'src/Boo.AntlrParser/BooParserBase.cs')}">
		
			<delete>
				<fileset basedir="src/Boo.AntlrParser">
					<includes name="*TokenTypes.*" />
				</fileset>
			</delete>			 
			
			<exec program="${java}" failonerror="true">
				<arg value="-cp" />
				<arg value="${antlr.jar}" />
				<arg value="antlr.Tool" />
				<arg value="-o" />
				<arg value="src/Boo.AntlrParser/" />
				<arg value="src/Boo.AntlrParser/boo.g" />
			</exec>
			
			<exec program="${java}" failonerror="true">
				<arg value="-cp" />
				<arg value="${antlr.jar}" />
				<arg value="antlr.Tool" />
				<arg value="-o" />
				<arg value="src/Boo.AntlrParser/" />
				<arg value="src/Boo.AntlrParser/booel.g" />
			</exec>
			
			<touch file="src/Boo.AntlrParser/BooParserBase.cs" />
		</if>
	</target>
	
	<target name="generate-ast" depends="init" unless="${skip.ast}">
		<if test="${not file::up-to-date('ast.model.boo', 'src/Boo/Lang/Ast/Impl/CompileUnitImpl.cs')}">
			<exec program="bin/booc.exe" useruntimeengine="true">
				<arg value="/p:booi" />
				<arg value="scripts/astgen.boo" />
			</exec>
		</if>
	</target>

	<target name="rebuild" depends="clean, all" />
	
	<target name="clean">
		<delete dir="build" failonerror="false" />
	</target>

	<target name="init">
		<mkdir dir="build" />
		<copy file="${nunit.framework.dll}" todir="build" />
		<copy file="${antlr.runtime.dll}" todir="build" />
	</target>

</project>
