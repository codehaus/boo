<?xml version="1.0" encoding="utf-8"?>
<Module xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Modifiers>None</Modifiers>
  <Name>slicing</Name>
  <Attributes />
  <Members />
  <BaseTypes />
  <Using />
  <Globals>
    <Statements>
      <Statement xsi:type="ExpressionStatement">
        <Expression xsi:type="BinaryExpression">
          <Operator>Assign</Operator>
          <Left xsi:type="ReferenceExpression">
            <Name>l</Name>
          </Left>
          <Right xsi:type="ListLiteralExpression">
            <Items>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>1</Value>
              </Expression>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>2</Value>
              </Expression>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>3</Value>
              </Expression>
            </Items>
          </Right>
        </Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
	  	<Expression xsi:type="MethodInvocationExpression">
				<Target xsi:type="ReferenceExpression">
					<Name>assert</Name>
				</Target>
		<Arguments>
        <Expression xsi:type="BinaryExpression">
          <Operator>Equality</Operator>
          <Left xsi:type="IntegerLiteralExpression">
            <Value>1</Value>
          </Left>
          <Right xsi:type="SlicingExpression">
            <Target xsi:type="ReferenceExpression">
              <Name>l</Name>
            </Target>
            <Begin xsi:type="IntegerLiteralExpression">
              <Value>0</Value>
            </Begin>
          </Right>
        </Expression>
		</Arguments>
		<NamedArguments />
		</Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
	  	<Expression xsi:type="MethodInvocationExpression">
				<Target xsi:type="ReferenceExpression">
					<Name>assert</Name>
				</Target>
		<Arguments>
        <Expression xsi:type="BinaryExpression">
          <Operator>Equality</Operator>
          <Left xsi:type="IntegerLiteralExpression">
            <Value>2</Value>
          </Left>
          <Right xsi:type="SlicingExpression">
            <Target xsi:type="ReferenceExpression">
              <Name>l</Name>
            </Target>
            <Begin xsi:type="IntegerLiteralExpression">
              <Value>1</Value>
            </Begin>
          </Right>
        </Expression>
		</Arguments>
		<NamedArguments />
		</Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
	  	<Expression xsi:type="MethodInvocationExpression">
				<Target xsi:type="ReferenceExpression">
					<Name>assert</Name>
				</Target>
		<Arguments>
        <Expression xsi:type="BinaryExpression">
          <Operator>Equality</Operator>
          <Left xsi:type="ListLiteralExpression">
            <Items>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>1</Value>
              </Expression>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>2</Value>
              </Expression>
            </Items>
          </Left>
          <Right xsi:type="SlicingExpression">
            <Target xsi:type="ReferenceExpression">
              <Name>l</Name>
            </Target>
            <Begin xsi:type="OmittedExpression" />
            <End xsi:type="IntegerLiteralExpression">
              <Value>2</Value>
            </End>
          </Right>
        </Expression>
		</Arguments>
		<NamedArguments />
		</Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
	  	<Expression xsi:type="MethodInvocationExpression">
				<Target xsi:type="ReferenceExpression">
					<Name>assert</Name>
				</Target>
		<Arguments>
        <Expression xsi:type="BinaryExpression">
          <Operator>Equality</Operator>
          <Left xsi:type="ListLiteralExpression">
            <Items>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>1</Value>
              </Expression>
            </Items>
          </Left>
          <Right xsi:type="SlicingExpression">
            <Target xsi:type="ReferenceExpression">
              <Name>l</Name>
            </Target>
            <Begin xsi:type="IntegerLiteralExpression">
              <Value>0</Value>
            </Begin>
            <End xsi:type="IntegerLiteralExpression">
              <Value>1</Value>
            </End>
          </Right>
        </Expression>
		</Arguments>
		<NamedArguments />
		</Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
	  	<Expression xsi:type="MethodInvocationExpression">
				<Target xsi:type="ReferenceExpression">
					<Name>assert</Name>
				</Target>
		<Arguments>
        <Expression xsi:type="BinaryExpression">
          <Operator>Equality</Operator>
          <Left xsi:type="ListLiteralExpression">
            <Items>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>1</Value>
              </Expression>
            </Items>
          </Left>
          <Right xsi:type="SlicingExpression">
            <Target xsi:type="ReferenceExpression">
              <Name>l</Name>
            </Target>
            <Begin xsi:type="OmittedExpression" />
            <End xsi:type="IntegerLiteralExpression">
              <Value>1</Value>
            </End>
          </Right>
        </Expression>
		</Arguments>
		<NamedArguments />
		</Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
	  	<Expression xsi:type="MethodInvocationExpression">
				<Target xsi:type="ReferenceExpression">
					<Name>assert</Name>
				</Target>
		<Arguments>
        <Expression xsi:type="BinaryExpression">
          <Operator>Equality</Operator>
          <Left xsi:type="IntegerLiteralExpression">
            <Value>3</Value>
          </Left>
          <Right xsi:type="SlicingExpression">
            <Target xsi:type="ReferenceExpression">
              <Name>l</Name>
            </Target>
            <Begin xsi:type="UnaryExpression">
              <Operator>ArithmeticNegate</Operator>
              <Operand xsi:type="IntegerLiteralExpression">
                <Value>1</Value>
              </Operand>
            </Begin>
          </Right>
        </Expression>
		</Arguments>
		<NamedArguments />
		</Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
	  	<Expression xsi:type="MethodInvocationExpression">
				<Target xsi:type="ReferenceExpression">
					<Name>assert</Name>
				</Target>
		<Arguments>
        <Expression xsi:type="BinaryExpression">
          <Operator>Equality</Operator>
          <Left xsi:type="ListLiteralExpression">
            <Items>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>2</Value>
              </Expression>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>3</Value>
              </Expression>
            </Items>
          </Left>
          <Right xsi:type="SlicingExpression">
            <Target xsi:type="ReferenceExpression">
              <Name>l</Name>
            </Target>
            <Begin xsi:type="IntegerLiteralExpression">
              <Value>1</Value>
            </Begin>
            <End xsi:type="OmittedExpression" />
          </Right>
        </Expression>
		</Arguments>
		<NamedArguments />
		</Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
	  	<Expression xsi:type="MethodInvocationExpression">
				<Target xsi:type="ReferenceExpression">
					<Name>assert</Name>
				</Target>
		<Arguments>
        <Expression xsi:type="BinaryExpression">
          <Operator>Equality</Operator>
          <Left xsi:type="ListLiteralExpression">
            <Items>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>3</Value>
              </Expression>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>2</Value>
              </Expression>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>1</Value>
              </Expression>
            </Items>
          </Left>
          <Right xsi:type="SlicingExpression">
            <Target xsi:type="ReferenceExpression">
              <Name>l</Name>
            </Target>
            <Begin xsi:type="OmittedExpression" />
            <End xsi:type="OmittedExpression" />
            <Step xsi:type="UnaryExpression">
              <Operator>ArithmeticNegate</Operator>
              <Operand xsi:type="IntegerLiteralExpression">
                <Value>1</Value>
              </Operand>
            </Step>
          </Right>
        </Expression>
		</Arguments>
		<NamedArguments />
		</Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
	  	<Expression xsi:type="MethodInvocationExpression">
				<Target xsi:type="ReferenceExpression">
					<Name>assert</Name>
				</Target>
		<Arguments>
        <Expression xsi:type="BinaryExpression">
          <Operator>Equality</Operator>
          <Left xsi:type="ListLiteralExpression">
            <Items>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>1</Value>
              </Expression>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>2</Value>
              </Expression>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>3</Value>
              </Expression>
            </Items>
          </Left>
          <Right xsi:type="SlicingExpression">
            <Target xsi:type="ReferenceExpression">
              <Name>l</Name>
            </Target>
            <Begin xsi:type="OmittedExpression" />
          </Right>
        </Expression>
		</Arguments>
		<NamedArguments />
		</Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
	  	<Expression xsi:type="MethodInvocationExpression">
				<Target xsi:type="ReferenceExpression">
					<Name>assert</Name>
				</Target>
		<Arguments>
        <Expression xsi:type="BinaryExpression">
          <Operator>Equality</Operator>
          <Left xsi:type="ListLiteralExpression">
            <Items>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>1</Value>
              </Expression>
              <Expression xsi:type="IntegerLiteralExpression">
                <Value>3</Value>
              </Expression>
            </Items>
          </Left>
          <Right xsi:type="SlicingExpression">
            <Target xsi:type="ReferenceExpression">
              <Name>l</Name>
            </Target>
            <Begin xsi:type="OmittedExpression" />
            <End xsi:type="OmittedExpression" />
            <Step xsi:type="IntegerLiteralExpression">
              <Value>2</Value>
            </Step>
          </Right>
        </Expression>
		</Arguments>
		<NamedArguments />
		</Expression>
      </Statement>
    </Statements>
  </Globals>
</Module>