<?xml version="1.0" encoding="utf-8"?>
<Module xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Modifiers>None</Modifiers>
  <Name>ternary_operator</Name>
  <Attributes />
  <Members />
  <BaseTypes />
  <Using />
  <Globals>
    <Statements>
      <Statement xsi:type="ExpressionStatement">
        <Expression xsi:type="BinaryExpression">
			<Operator>Assign</Operator>
          <Left xsi:type="ReferenceExpression">
            <Name>n</Name>
          </Left>
          <Right xsi:type="MethodInvocationExpression">
		  	<Target xsi:type="ReferenceExpression">
            	<Name>int</Name>
			</Target>
            <Arguments>
              <Expression xsi:type="MethodInvocationExpression">
			  	<Target xsi:type="ReferenceExpression">
                	<Name>prompt</Name>
				</Target>
                <Arguments>
                  <Expression xsi:type="StringLiteralExpression">
                    <Value>um n√∫mero: </Value>
                  </Expression>
                </Arguments>
				<NamedArguments />
              </Expression>
            </Arguments>
			<NamedArguments />
          </Right>
        </Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
        <Expression xsi:type="MethodInvocationExpression">
			<Target xsi:type="ReferenceExpression">
				<Name>print</Name>
			</Target>
          <Arguments>
            <Expression xsi:type="TernaryExpression">
              <Condition xsi:type="BinaryExpression">
                <Operator>Modulus</Operator>
                <Left xsi:type="ReferenceExpression">
                  <Name>n</Name>
                </Left>
                <Right xsi:type="IntegerLiteralExpression">
                  <Value>2</Value>
                </Right>
              </Condition>
              <TrueExpression xsi:type="StringLiteralExpression">
                <Value>sorry</Value>
              </TrueExpression>
              <FalseExpression xsi:type="StringLiteralExpression">
                <Value>cool</Value>
              </FalseExpression>
            </Expression>
          </Arguments>
		  <NamedArguments />
        </Expression>
      </Statement>
      <Statement xsi:type="ExpressionStatement">
        <Expression xsi:type="BinaryExpression">
			<Operator>Assign</Operator>
          <Left xsi:type="ReferenceExpression">
            <Name>a</Name>
          </Left>
          <Right xsi:type="TernaryExpression">
            <Condition xsi:type="BinaryExpression">
              <Operator>GreaterThan</Operator>
              <Left xsi:type="ReferenceExpression">
                <Name>n</Name>
              </Left>
              <Right xsi:type="IntegerLiteralExpression">
                <Value>10</Value>
              </Right>
            </Condition>
            <TrueExpression xsi:type="TernaryExpression">
              <Condition xsi:type="BinaryExpression">
                <Operator>GreaterThan</Operator>
                <Left xsi:type="ReferenceExpression">
                  <Name>n</Name>
                </Left>
                <Right xsi:type="IntegerLiteralExpression">
                  <Value>20</Value>
                </Right>
              </Condition>
              <TrueExpression xsi:type="IntegerLiteralExpression">
                <Value>20</Value>
              </TrueExpression>
              <FalseExpression xsi:type="IntegerLiteralExpression">
                <Value>10</Value>
              </FalseExpression>
            </TrueExpression>
            <FalseExpression xsi:type="ReferenceExpression">
              <Name>n</Name>
            </FalseExpression>
          </Right>
        </Expression>
      </Statement>
    </Statements>
  </Globals>
</Module>