package Boo.Ast

	class CompileUnit(Node)
		Modules as ModuleCollection
	end
	
	<<enum>>
	class TypeMemberModifiers
		None = 0
		Public = 1
		Protected = 2
		Private = 4
		Internal = 8
		Static = 16
		Final = 32
		Transient = 64
		Override = 128
	end
	
	[abstract]
	class TypeMember(Node, INodeWithAttributes)
		Modifiers as TypeMemberModifiers
		Name as string
		Attributes as AttributeCollection
	end
	
	[ItemType(TypeMember)]
	<<collection>>
	class TypeMemberCollection
	end
	
	[abstract]
	class TypeReference(Node)
	end
	
	class SimpleTypeReference(TypeReference)		
		Name as string
	end
	
	class TupleTypeReference(TypeReference)
		ElementType as TypeReference
	end
	
	[ItemType(TypeReference)]
	<<collection>>
	class TypeReferenceCollection
	end
	
	[abstract]
	class TypeDefinition(TypeMember)
		Members as TypeMemberCollection
		BaseTypes as TypeReferenceCollection
	end
	
	[ItemType(TypeDefinition)]
	<<collection>>
	class TypeDefinitionCollection
	end
	
	class NamespaceDeclaration(Node)
		Name as string
	end
	
	class Import(Node)
		Namespace as string
		AssemblyReference as ReferenceExpression
		Alias as ReferenceExpression
	end
	
	[ItemType(Import)]
	<<collection>>
	class ImportCollection
	end
	
	class Module(TypeDefinition)
		Namespace as NamespaceDeclaration
		Imports as ImportCollection
		[auto]
		Globals as Block
	end
	
	[ItemType(Module)]
	<<collection>>
	class ModuleCollection
	end
	
	class ClassDefinition(TypeDefinition)
	end
	
	class InterfaceDefinition(TypeDefinition)
	end
	
	class EnumDefinition(TypeDefinition)
	end
	
	class EnumMember(TypeMember)
		Initializer as IntegerLiteralExpression		
	end
	
	class Field(TypeMember)
		Type as TypeReference
		Initializer as Expression
	end
	
	class Property(TypeMember)
		Parameters as ParameterDeclarationCollection
		Getter as Method
		Setter as Method
		Type as TypeReference
	end
	
	class Local(Node)
		Name as string
	end
	
	[ItemType(Local)]
	<<collection>>
	class LocalCollection		
	end
	
	class Method(TypeMember)
		Parameters as ParameterDeclarationCollection
		ReturnType as TypeReference
		ReturnTypeAttributes as AttributeCollection
		[auto]
		Body as Block
		[lazy]
		Locals as LocalCollection
	end
	
	class Constructor(Method)
	end
	
	class ParameterDeclaration(Node, INodeWithAttributes)
		Name as string
		Type as TypeReference
		Attributes as AttributeCollection
	end
	
	[ItemType(ParameterDeclaration)]
	<<collection>>
	class ParameterDeclarationCollection
	end
	
	class Declaration(Node)
		Name as string
		Type as TypeReference
	end
	
	[ItemType(Declaration)]
	<<collection>>
	class DeclarationCollection
	end
	
	class Block(Node)
		Statements as StatementCollection
	end	
		
	class Attribute(Node, INodeWithArguments)
		Name as string
		Arguments as ExpressionCollection
		NamedArguments as ExpressionPairCollection
	end
	
	[ItemType(Attribute)]
	<<collection>>
	class AttributeCollection
	end
	
	<<enum>>
	class StatementModifierType
		Uninitialized
		If
		Unless
		While
		Until
	end
	
	class StatementModifier(Node)
		Type as StatementModifierType
		Condition as Expression
	end
	
	[abstract]
	class Statement(Node)
		Modifier as StatementModifier
	end
	
	[ItemType(Statement)]
	<<collection>>
	class StatementCollection
	end
	
	class DeclarationStatement(Statement)
		Declaration as Declaration
		Initializer as Expression
	end
	
	class AssertStatement(Statement)
		Condition as Expression
		Message as Expression
	end
	
	class MacroStatement(Statement)
		Name as string
		Arguments as ExpressionCollection
		
		[auto]
		Block as Block
	end
	
	class TryStatement(Statement)
		[auto]
		ProtectedBlock as Block
		ExceptionHandlers as ExceptionHandlerCollection
		SuccessBlock as Block
		EnsureBlock as Block		
	end
		
	class ExceptionHandler(Node)
		Declaration as Declaration
		
		[auto]
		Block as Block
	end
	
	[ItemType(ExceptionHandler)]
	<<collection>>
	class ExceptionHandlerCollection
	end
	
	class IfStatement(Statement)
		Expression as Expression
		TrueBlock as Block
		FalseBlock as Block
	end
	
	class UnlessStatement(Statement)
		Condition as Expression
		
		[auto]
		Block as Block
	end
	
	class ForStatement(Statement)
		Declarations as DeclarationCollection
		Iterator as Expression
		
		[auto]
		Block as Block
	end
	
	class WhileStatement(Statement)
		Condition as Expression
		
		[auto]
		Block as Block
	end
	
	class GivenStatement(Statement)
		Expression as Expression
		WhenClauses as WhenClauseCollection
		OtherwiseBlock as Block
	end
	
	class WhenClause(Node)
		Condition as Expression
		
		[auto]
		Block as Block
	end	
	
	[ItemType(WhenClause)]
	<<collection>>
	class WhenClauseCollection
	end
	
	class BreakStatement(Statement)
	end
	
	class ContinueStatement(Statement)
	end
	
	class RetryStatement(Statement)
	end
	
	class ReturnStatement(Statement)
		Expression as Expression
	end
	
	class YieldStatement(Statement)
		Expression as Expression
	end
	
	class RaiseStatement(Statement)
		Exception as Expression 
	end
	
	class UnpackStatement(Statement)
		Declarations as DeclarationCollection
		Expression as Expression
	end
	
	class ExpressionStatement(Statement)
		[LexicalInfo]
		Expression as Expression
	end
	
	[abstract]
	class Expression(Node)
	
	end
	
	[ItemType(Expression)]
	<<collection>>
	class ExpressionCollection
	end
	
	<<ignored>>
	class OmittedExpression(Expression)
	end
	
	class ExpressionPair(Node)
		First as Expression
		Second as Expression
	end
	
	[ItemType(ExpressionPair)]
	<<collection>>
	class ExpressionPairCollection
	end
	
	class MethodInvocationExpression(Expression, INodeWithArguments)
		Target as Expression
		Arguments as ExpressionCollection
		NamedArguments as ExpressionPairCollection
	end
	
	<<enum>>
	class BinaryOperatorType
		None
		Addition
		Subtraction
		Multiply
		Division		
		Modulus
		Exponentiation
		LessThan
		LessThanOrEqual
		GreaterThan
		GreaterThanOrEqual
		Equality
		Inequality
		Match
		NotMatch
		Assign
		InPlaceAdd
		InPlaceSubtract
		InPlaceMultiply
		InPlaceDivide
		ReferenceEquality
		ReferenceInequality
		TypeTest
		Member
		NotMember
		Or
		And
		BitwiseOr
	end
	
	<<enum>>
	class UnaryOperatorType
		None
		UnaryNegation
		Increment
		Decrement
		LogicalNot
	end
	
	class UnaryExpression(Expression)
		Operator as UnaryOperatorType
		Operand as Expression
	end
	
	class BinaryExpression(Expression)
		Operator as BinaryOperatorType
		Left as Expression
		Right as Expression
	end
	
	class TernaryExpression(Expression)
		Condition as Expression
		TrueExpression as Expression
		FalseExpression as Expression
	end
	
	class ReferenceExpression(Expression)
		Name as string
	end
	
	class MemberReferenceExpression(ReferenceExpression)
		Target as Expression
	end
	
	[abstract]
	class LiteralExpression(Expression)
	end
	
	class StringLiteralExpression(LiteralExpression)
		Value as string
	end
	
	class TimeSpanLiteralExpression(LiteralExpression)
		Value as TimeSpan
	end
	
	class IntegerLiteralExpression(LiteralExpression)
		Value as long
		IsLong as bool
	end
	
	class DoubleLiteralExpression(LiteralExpression)
		Value as double
	end
	
	class NullLiteralExpression(LiteralExpression)
	end
	
	class SelfLiteralExpression(LiteralExpression)
	end
	
	class SuperLiteralExpression(LiteralExpression)
	end
	
	class BoolLiteralExpression(LiteralExpression)
		Value as bool
	end
	
	class RELiteralExpression(LiteralExpression)
		Value as string
	end
	
	class StringFormattingExpression(Expression)
		Template as string
		Arguments as ExpressionCollection
	end
	
	class HashLiteralExpression(LiteralExpression)
		Items as ExpressionPairCollection
	end
	
	class ListLiteralExpression(LiteralExpression)
		Items as ExpressionCollection
	end
	
	class TupleLiteralExpression(ListLiteralExpression)
	end
	
	class IteratorExpression(Expression)
		Expression as Expression
		Declarations as DeclarationCollection
		Iterator as Expression
		Filter as StatementModifier
	end
	
	class SlicingExpression(Expression)
		Target as Expression
		Begin as Expression
		End as Expression
		Step as Expression
	end
	
	class AsExpression(Expression)
		Target as Expression
		Type as TypeReference
	end
	
end
